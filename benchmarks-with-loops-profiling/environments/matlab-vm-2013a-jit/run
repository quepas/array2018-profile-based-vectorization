#!/usr/bin/env python
import argparse
import sys
import subprocess
import os.path
import json


parser = argparse.ArgumentParser(description='Unified interface for running Matlab programs on the command line.')
parser.add_argument('file', type=str, 
                   help='the path to the matlab script or function file to execute')
parser.add_argument('arguments', metavar='A', nargs='*', type=str,
                   help='positional arguments to pass to the function (ignored if the file is a script)')

args = parser.parse_args()

if sys.platform == 'darwin':
    lib_dir = 'osx'
elif sys.platform.startswith('linux'):
    lib_dir = 'linux'
else:
    print 'Not supported.'
    sys.exit(99)

run_script_dir = os.path.dirname(os.path.realpath(os.path.realpath(__file__)))
env_dir = os.path.abspath(os.path.join(run_script_dir, lib_dir))
dir_name = os.path.abspath(os.path.dirname(args.file))
file_name = os.path.basename(args.file)
function_name = os.path.splitext(file_name)[0]

def bash_to_matlab(a):
    try:
        return str(int(a))
    except ValueError:
        pass

    try:
        return str(float(a))
    except ValueError:
        pass

    return "'" + a + "'"

def description():
    return json.load(open(os.path.join(run_script_dir, 'environment.json')))

desc = description()

arguments = map(bash_to_matlab, args.arguments)

run_options = desc["run-script-options"]
run_option_string = ""

if run_options.has_key("matlab-jit"):
    if run_options["matlab-jit"]:
        run_option_string += "feature accel on;"
    else:
        run_option_string += "feature accel off;"

runner_script = run_option_string + """cd('%s'); addpath('%s'); addpath('%s'); try %s(%s); exit(0); catch, ME = lasterror; fprintf(2, '%%s\\n', ME.message); exit(1); end"""%(dir_name, env_dir, dir_name, function_name,','.join(arguments))

try:
    command = [desc["executable-path"]]
    command.extend(desc["executable-options"])
    command.append(runner_script)
    subprocess.check_call(command, stdout=sys.stdout, stderr=sys.stderr)
    sys.exit(0)
except subprocess.CalledProcessError as e:
    sys.exit(e.returncode)











